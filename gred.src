#!/bin/bash
# grep and edit
function help(){
    cat << HEAD
grep project folder recursievly and open results in vim
usage:
HEAD
cat $0|grep '#descr#'|grep -v '#rm#'|\
    grep '\['|sed 's/\[ "$1" = ''\(.*\)'' ] .* #descr#\(.*\)/\1 - \2/' #rm#
}
X="--exclude-dir build"
JS_EXCLUDE='--exclude-dir node_modules'
COLOR='--color=always'
while [ -n "$1" ]; do
    [ "$1" = '--help' ] && { help ; exit 1 ; }  #descr# Show help and exit
    [ "$1" = '--path' ] && { shift ; P="$P $1 " ; shift ; continue ; } #descr# Search path dirs
    [ "$1" = '--x' ] && { shift ; X="$X --exclude-dir $1 " ; shift ; continue ; } #descr# Exclude dir
    [ "$1" = '--cpp' ] && { shift ; I="$I `echo --include=\*.{cpp,h,c,hpp,inl,cu}`" ; continue ; } #descr# Limit search to c++ files
    [ "$1" = '--cmake' ] && { shift ; I="$I `echo --include=\*.{txt,cmake}`" ; continue ; } #descr# Limit search to cmake files
    [ "$1" = '--js' ] && { shift ; I="$I `echo --include=\*.{js,jsx,json,coffee}`" X="$X $JS_EXCLUDE" ; continue ; } #descr# Limit search to javascript files
    [ "$1" = '--py' ] && { shift ; I="$I `echo --include=\*.{py}`" X="$X $JS_EXCLUDE" ; continue ; } #descr# Limit search to python files
    [ "$1" = '--json' ] && { shift ; I="$I --include=*.{json}" X="$X $JS_EXCLUDE" ; continue ; } #descr# Limit search to .json files
    [ "$1" = '--css' ] && { shift ; I="$I --include=*.{css}" ; continue ; } #descr# Limit search to .css files
    [ "$1" = '--name' ] && { shift ; I="$I --include=$1" ; shift ; continue ; } #descr# Search only specified files
    [ "$1" = '--ni' ] && { NONINTERACTIVE=1; shift ; continue ; } #descr# Non interactive mode
    [ "$1" = '--nc' ] && { COLOR='' ; shift ; continue ; } #descr# No color
    [ "$1" = '--ci' ] && { CI=i ; SCI='\c'; shift ; continue ; } #descr# Case insencitive
    [ "$1" = '--verbose' ] && { VERBOSE=1 ; shift ; continue ; } #descr# Show how grep is invoked
    [ "$1" = '--nox' ] && { shift ; X="" ; continue ; } #descr# No default exclude (just .svn and .git remain)
    [ -n "$EXPR" ] && EXPR="$EXPR $1" || EXPR="$1"
    shift
done
[ -z "$P" ] && P="."

# Unnamed pipe has limited size, so have to use tmp file instead
BUF_FILE=/tmp/$$
function cleanup {
    rm -f $BUF_FILE &
    exit
}
trap cleanup EXIT SIGINT

[ -n "$VERBOSE" ] && echo "grep $COLOR --exclude-dir \.svn --exclude-dir \.git $X $I -I${CI}nr \"$EXPR\" $P"
[ -n "$NONINTERACTIVE" ] && { grep $COLOR --exclude-dir \.svn --exclude-dir \.git $X $I -I${CI}nr "$EXPR" $P ;\
    exit ; }
FZFC="fzf -m --ansi"
export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --multi --inline-info \
    --preview='(f=\$(echo {}|sed 's/:.*//') && l=\$(echo {}|sed -e 's/^[^:]*://' -e 's/:.*//'); s=0; \
        (( \$l>5 )) && let s=\$l-5; let e=\$l+30; \
        bat --style=numbers --color=always --line-range \$s:\$e \$f -H \$l)' \
    --preview-window='right' --bind='ctrl-p:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+}|pbcopy)'"

list="`grep $COLOR --exclude-dir \.svn --exclude-dir \.git $X $I -I${CI}nr "$EXPR" $P | $FZFC`"
IFS=$(echo -en "\n\b")
for i in $list
do
    file=`echo $i|sed 's/:.*//'`
    files="$files $file"
done
[ -n "$files" ] && vim `echo $files | awk '{for(i=1; i<=NF; i++){map[$i]=1}} END{for(f in map){print f}}'` +/"${SCI}${EXPR}"
